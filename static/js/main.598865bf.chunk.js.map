{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","monster","className","src","id","alt","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","a","fetch","response","json","users","this","console","error","filteredMonsters","filter","toLowerCase","includes","toLocaleLowerCase","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2VAEaA,EAAO,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OAClB,sBAAKC,UAAU,iBAAf,UACE,qBAAKC,IAAG,+BAA0BF,EAAQG,GAAlC,0BAA8DC,IAAI,YAC1E,6BAAKJ,EAAQK,OACb,4BAAIL,EAAQM,YCHHC,G,MAAW,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACzB,OACE,qBAAKP,UAAU,YAAf,SACGO,EAASC,KAAI,SAAAT,GAAO,OACnB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQG,WCLdO,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACvB,uBAAOX,UAAU,SAASY,KAAK,SAASF,YAAaA,EAAaG,SAAUF,MCwC/DG,E,kDArCb,aAAe,IAAD,8BACZ,gBAkBFH,aAAe,SAAAI,GAAC,OAAI,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAhBxD,EAAKC,MAAQ,CACXb,SAAU,GACVU,YAAa,IALH,E,4FASd,8BAAAI,EAAA,+EAE2BC,MAAM,8CAFjC,cAEUC,EAFV,gBAGwBA,EAASC,OAHjC,OAGUC,EAHV,OAIIC,KAAKV,SAAS,CAAET,SAAUkB,IAJ9B,kDAMIE,QAAQC,MAAR,MANJ,0D,0EAYA,WAAU,IAAD,EAC2BF,KAAKN,MAA/Bb,EADD,EACCA,SAAUU,EADX,EACWA,YACZY,EAAmBtB,EAASuB,QAAO,SAAA/B,GAAO,OAC9CA,EAAQK,KAAK2B,cAAcC,SAASf,EAAYgB,wBAGlD,OACE,sBAAKjC,UAAU,MAAf,UACE,oDACA,cAAC,EAAD,CAAWU,YAAY,qBAAqBC,aAAce,KAAKf,eAC/D,cAAC,EAAD,CAAUJ,SAAUsB,W,GAhCVK,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.598865bf.chunk.js","sourcesContent":["import './card.styles.css';\r\n\r\nexport const Card = ({ monster }) => (\r\n  <div className='card-container'>\r\n    <img src={`https://robohash.org/${monster.id}?set=set2&size=180x180`} alt='monster' />\r\n    <h1>{monster.name}</h1>\r\n    <p>{monster.email}</p>\r\n  </div>\r\n);\r\n","import { Card } from '../card/card.component';\r\nimport './card-list.styles.css';\r\n\r\nexport const CardList = ({ monsters }) => {\r\n  return (\r\n    <div className='card-list'>\r\n      {monsters.map(monster => (\r\n        <Card key={monster.id} monster={monster} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n","import './search-box.styles.css';\r\n\r\nexport const SearchBox = ({ placeholder, handleChange }) => (\r\n  <input className='search' type='search' placeholder={placeholder} onChange={handleChange} />\r\n);\r\n","import { Component } from 'react';\nimport './App.css';\nimport { CardList } from './components/card-list/card-list.component';\nimport { SearchBox } from './components/search-box/search-box.component';\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      monsters: [],\n      searchField: '',\n    };\n  }\n\n  async componentDidMount() {\n    try {\n      const response = await fetch('https://jsonplaceholder.typicode.com/users');\n      const users = await response.json();\n      this.setState({ monsters: users });\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  handleChange = e => this.setState({ searchField: e.target.value });\n\n  render() {\n    const { monsters, searchField } = this.state;\n    const filteredMonsters = monsters.filter(monster =>\n      monster.name.toLowerCase().includes(searchField.toLocaleLowerCase())\n    );\n\n    return (\n      <div className='App'>\n        <h1> Monsters Rolodex </h1>\n        <SearchBox placeholder='Search monsters...' handleChange={this.handleChange} />\n        <CardList monsters={filteredMonsters}></CardList>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}